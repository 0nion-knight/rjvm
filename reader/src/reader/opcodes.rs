use int_enum::IntEnum;
use InstructionLength::{Fixed, Variable};

//noinspection SpellCheckingInspection
#[repr(u8)]
#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntEnum, strum_macros::Display)]
pub enum OpCode {
    Aaload = 0x32,
    Aastore = 0x53,
    Aconst_null = 0x01,
    Aload = 0x19,
    Aload_0 = 0x2a,
    Aload_1 = 0x2b,
    Aload_2 = 0x2c,
    Aload_3 = 0x2d,
    Anewarray = 0xbd,
    Areturn = 0xb0,
    Arraylength = 0xbe,
    Astore = 0x3a,
    Astore_0 = 0x4b,
    Astore_1 = 0x4c,
    Astore_2 = 0x4d,
    Astore_3 = 0x4e,
    Athrow = 0xbf,
    Baload = 0x33,
    Bastore = 0x54,
    Bipush = 0x10,
    Caload = 0x34,
    Castore = 0x55,
    Checkcast = 0xc0,
    D2f = 0x90,
    D2i = 0x8e,
    D2l = 0x8f,
    Dadd = 0x63,
    Daload = 0x31,
    Dastore = 0x52,
    Dcmpg = 0x98,
    Dcmpl = 0x97,
    Dconst_0 = 0x0e,
    Dconst_1 = 0x0f,
    Ddiv = 0x6f,
    Dload = 0x18,
    Dload_0 = 0x26,
    Dload_1 = 0x27,
    Dload_2 = 0x28,
    Dload_3 = 0x29,
    Dmul = 0x6b,
    Dneg = 0x77,
    Drem = 0x73,
    Dreturn = 0xaf,
    Dstore = 0x39,
    Dstore_0 = 0x47,
    Dstore_1 = 0x48,
    Dstore_2 = 0x49,
    Dstore_3 = 0x4a,
    Dsub = 0x67,
    Dup = 0x59,
    Dup_x1 = 0x5a,
    Dup_x2 = 0x5b,
    Dup2 = 0x5c,
    Dup2_x1 = 0x5d,
    Dup2_x2 = 0x5e,
    F2d = 0x8d,
    F2i = 0x8b,
    F2l = 0x8c,
    Fadd = 0x62,
    Faload = 0x30,
    Fastore = 0x51,
    Fcmpg = 0x96,
    Fcmpl = 0x95,
    Fconst_0 = 0x0b,
    Fconst_1 = 0x0c,
    Fconst_2 = 0x0d,
    Fdiv = 0x6e,
    Fload = 0x17,
    Fload_0 = 0x22,
    Fload_1 = 0x23,
    Fload_2 = 0x24,
    Fload_3 = 0x25,
    Fmul = 0x6a,
    Fneg = 0x76,
    Frem = 0x72,
    Freturn = 0xae,
    Fstore = 0x38,
    Fstore_0 = 0x43,
    Fstore_1 = 0x44,
    Fstore_2 = 0x45,
    Fstore_3 = 0x46,
    Fsub = 0x66,
    Getfield = 0xb4,
    Getstatic = 0xb2,
    Goto = 0xa7,
    Goto_w = 0xc8,
    I2b = 0x91,
    I2c = 0x92,
    I2d = 0x87,
    I2f = 0x86,
    I2l = 0x85,
    I2s = 0x93,
    Iadd = 0x60,
    Iaload = 0x2e,
    Iand = 0x7e,
    Iastore = 0x4f,
    Iconst_m1 = 0x02,
    Iconst_0 = 0x03,
    Iconst_1 = 0x04,
    Iconst_2 = 0x05,
    Iconst_3 = 0x06,
    Iconst_4 = 0x07,
    Iconst_5 = 0x08,
    Idiv = 0x6c,
    If_acmpeq = 0xa5,
    If_acmpne = 0xa6,
    If_icmpeq = 0x9f,
    If_icmpne = 0xa0,
    If_icmplt = 0xa1,
    If_icmpge = 0xa2,
    If_icmpgt = 0xa3,
    If_icmple = 0xa4,
    Ifeq = 0x99,
    Ifne = 0x9a,
    Iflt = 0x9b,
    Ifge = 0x9c,
    Ifgt = 0x9d,
    Ifle = 0x9e,
    Ifnonnull = 0xc7,
    Ifnull = 0xc6,
    Iinc = 0x84,
    Iload = 0x15,
    Iload_0 = 0x1a,
    Iload_1 = 0x1b,
    Iload_2 = 0x1c,
    Iload_3 = 0x1d,
    Imul = 0x68,
    Ineg = 0x74,
    Instanceof = 0xc1,
    Invokedynamic = 0xba,
    Invokeinterface = 0xb9,
    Invokespecial = 0xb7,
    Invokestatic = 0xb8,
    Invokevirtual = 0xb6,
    Ior = 0x80,
    Irem = 0x70,
    Ireturn = 0xac,
    Ishl = 0x78,
    Ishr = 0x7a,
    Istore = 0x36,
    Istore_0 = 0x3b,
    Istore_1 = 0x3c,
    Istore_2 = 0x3d,
    Istore_3 = 0x3e,
    Isub = 0x64,
    Iushr = 0x7c,
    Ixor = 0x82,
    Jsr = 0xa8,
    Jsr_w = 0xc9,
    L2d = 0x8a,
    L2f = 0x89,
    L2i = 0x88,
    Ladd = 0x61,
    Laload = 0x2f,
    Land = 0x7f,
    Lastore = 0x50,
    Lcmp = 0x94,
    Lconst_0 = 0x09,
    Lconst_1 = 0x0a,
    Ldc = 0x12,
    Ldc_w = 0x13,
    Ldc2_w = 0x14,
    Ldiv = 0x6d,
    Lload = 0x16,
    Lload_0 = 0x1e,
    Lload_1 = 0x1f,
    Lload_2 = 0x20,
    Lload_3 = 0x21,
    Lmul = 0x69,
    Lneg = 0x75,
    Lookupswitch = 0xab,
    Lor = 0x81,
    Lrem = 0x71,
    Lreturn = 0xad,
    Lshl = 0x79,
    Lshr = 0x7b,
    Lstore = 0x37,
    Lstore_0 = 0x3f,
    Lstore_1 = 0x40,
    Lstore_2 = 0x41,
    Lstore_3 = 0x42,
    Lsub = 0x65,
    Lushr = 0x7d,
    Lxor = 0x83,
    Monitorenter = 0xc2,
    Monitorexit = 0xc3,
    Multianewarray = 0xc5,
    New = 0xbb,
    Newarray = 0xbc,
    Nop = 0x00,
    Pop = 0x57,
    Pop2 = 0x58,
    Putfield = 0xb5,
    Putstatic = 0xb3,
    Ret = 0xa9,
    Return = 0xb1,
    Saload = 0x35,
    Sastore = 0x56,
    Sipush = 0x11,
    Swap = 0x5f,
    Tableswitch = 0xaa,
    Wide = 0xc4,
}

pub enum InstructionLength {
    Fixed(usize),
    Variable,
}

impl OpCode {
    pub fn instruction_length(self) -> InstructionLength {
        match self {
            OpCode::Aload => Fixed(1),
            OpCode::Anewarray => Fixed(2),
            OpCode::Astore => Fixed(1),
            OpCode::Bipush => Fixed(1),
            OpCode::Checkcast => Fixed(2),
            OpCode::Dload => Fixed(1),
            OpCode::Dstore => Fixed(1),
            OpCode::Fload => Fixed(1),
            OpCode::Fstore => Fixed(1),
            OpCode::Getfield => Fixed(2),
            OpCode::Getstatic => Fixed(2),
            OpCode::Goto => Fixed(2),
            OpCode::Goto_w => Fixed(4),
            OpCode::If_acmpeq => Fixed(2),
            OpCode::If_acmpne => Fixed(2),
            OpCode::If_icmpeq => Fixed(2),
            OpCode::If_icmpne => Fixed(2),
            OpCode::If_icmplt => Fixed(2),
            OpCode::If_icmpge => Fixed(2),
            OpCode::If_icmpgt => Fixed(2),
            OpCode::If_icmple => Fixed(2),
            OpCode::Ifeq => Fixed(2),
            OpCode::Ifne => Fixed(2),
            OpCode::Iflt => Fixed(2),
            OpCode::Ifge => Fixed(2),
            OpCode::Ifgt => Fixed(2),
            OpCode::Ifle => Fixed(2),
            OpCode::Ifnonnull => Fixed(2),
            OpCode::Ifnull => Fixed(2),
            OpCode::Iinc => Fixed(2),
            OpCode::Iload => Fixed(1),
            OpCode::Instanceof => Fixed(2),
            OpCode::Invokedynamic => Fixed(4),
            OpCode::Invokeinterface => Fixed(4),
            OpCode::Invokespecial => Fixed(2),
            OpCode::Invokestatic => Fixed(2),
            OpCode::Invokevirtual => Fixed(2),
            OpCode::Istore => Fixed(1),
            OpCode::Jsr => Fixed(2),
            OpCode::Jsr_w => Fixed(4),
            OpCode::Ldc => Fixed(1),
            OpCode::Ldc_w => Fixed(2),
            OpCode::Ldc2_w => Fixed(2),
            OpCode::Lload => Fixed(1),
            OpCode::Lookupswitch => Variable,
            OpCode::Lstore => Fixed(1),
            OpCode::Multianewarray => Fixed(3),
            OpCode::New => Fixed(2),
            OpCode::Newarray => Fixed(1),
            OpCode::Putfield => Fixed(2),
            OpCode::Putstatic => Fixed(2),
            OpCode::Ret => Fixed(1),
            OpCode::Sipush => Fixed(2),
            OpCode::Tableswitch => Variable,
            OpCode::Wide => Variable,
            _ => Fixed(0),
        }
    }
}
